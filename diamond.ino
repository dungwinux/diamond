#include <stdint.h>

constexpr uint8_t convert(uint8_t q) {
  switch (q) {
    case 'A' ... 'Z':
      return q - 'A';
    case 'a' ... 'z':
      return q - 'a' + 26;
    case '0' ... '9':
      return q - '0' + 52;
    case '+':
      return 62;
    case '/':
      return 63;
    case '=':
      return 0;
    default:
      return 63;
  }
}

namespace variadic_toolbox {
template<unsigned count, template<unsigned...> class meta_functor,
         unsigned... indices>
struct apply_range {
  typedef typename apply_range<count - 1, meta_functor, count - 1,
                               indices...>::result result;
};

template<template<unsigned...> class meta_functor, unsigned... indices>
struct apply_range<0, meta_functor, indices...> {
  typedef typename meta_functor<indices...>::result result;
};
}  // namespace variadic_toolbox

namespace compile_time {
template<char... str>
struct string {
  static constexpr const uint8_t chars[sizeof...(str) + 1] = { convert(str)...,
                                                               '\0' };
};
template<typename lambda_str_type>
struct string_builder {
  template<unsigned... indices>
  struct produce {
    typedef string<lambda_str_type{}.chars[indices]...> result;
  };
};
}  // namespace compile_time

#define CSTRING(string_literal) \
  [] { \
    struct constexpr_string_type { \
      const char *chars = string_literal; \
    }; \
    return variadic_toolbox::apply_range< \
      sizeof(string_literal) - 1, \
      compile_time::string_builder<constexpr_string_type>::produce>:: \
      result{}; \
  }()

extern "C" {

  uint8_t *secret(uint8_t *a, uint8_t const *b) noexcept {
    int ai = 0;
    for (int bi = 0; b[bi] != 0; ai += 3, bi += 4) {
      a[ai] = ((b[bi] & 0b111111) << 2) | ((b[bi + 1] >> 4) & 0b11);
      a[ai + 1] = ((b[bi + 1] & 0b1111) << 4) | ((b[bi + 2] >> 2) & 0b1111);
      a[ai + 2] = ((b[bi + 2] & 0b11) << 6) | (b[bi + 3] & 0b111111);
    }
    if (ai != 0) a[ai] = 0;
    return a;
  }
}

#define K1234 CSTRING("VU1BU1N7VEgzXzRXMzUwTTNfODQ1MzY0XzFOX0VTUDgyNjZ9").chars
uint8_t tmp[0x30];

#define IIID reinterpret_cast<char const *>(secret(tmp, K1234))

// #include <stdio.h>
// int main() { puts(reinterpret_cast<char *>(secret(t, q))); }

#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

#ifndef STASSID
#define STASSID "umassctf"
#define STAPSK IIID
#endif

const char *ssid = STASSID;
const char *password = STAPSK;

ESP8266WebServer server(80);

const int led = 13;

inline void handleRoot() {
  digitalWrite(led, 1);
  server.send(200, "text/plain", "Welcome to UMassCTF network!\r\n");
  digitalWrite(led, 0);
}

inline void handleNotFound() {
  digitalWrite(led, 1);
  server.send(404, "text/plain", "File Not Found\n\n");
  digitalWrite(led, 0);
}

void setup(void) {
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Network connected via ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("secret8266")) { Serial.println("MDNS responder started"); }

  server.on("/", handleRoot);

  server.on("/gif", []() {
    static constexpr uint8_t gif[] PROGMEM = {
      0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x20, 0x00, 0x20, 0x00, 0x70, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x87, 0xFF, 0xFF, 0xFF, 0xB5, 0xA5, 0xA5, 0xDE, 0xE6, 0xEF, 0x8C, 0x10, 0x19, 0xAD, 0x10, 0x19, 0x94, 0xEF, 0xA5, 0xAD, 0x10, 0x5A, 0xEF, 0x10, 0x5A, 0xEF, 0x10, 0xDE, 0xAD, 0x10, 0xDE, 0xEF, 0x10, 0x19, 0xEF, 0x10, 0x9C, 0xAD, 0x10, 0x9C, 0xEF, 0xA5, 0x10, 0xAD, 0xA5, 0x10, 0x94, 0xCE, 0xA5, 0x8C, 0x10, 0x5A, 0xCE, 0x10, 0x5A, 0xCE, 0x10, 0xDE, 0x8C, 0x10, 0xDE, 0xCE, 0x10, 0x19, 0xCE, 0x10, 0x9C, 0x8C, 0x10, 0x9C, 0xCE, 0xA5, 0x10, 0x8C, 0xA5, 0x10, 0xAD, 0x73, 0x5A, 0x94, 0xAD, 0xA5, 0x8C, 0x73, 0x9C, 0xD6, 0xE6, 0x9C, 0xAD, 0x52, 0x5A, 0xB5, 0xCE, 0xA5, 0xE6, 0x9C, 0xEF, 0x94, 0xEF, 0xE6, 0xEF, 0xE6, 0x10, 0xAD, 0xE6, 0x10, 0x94, 0xA5, 0xEF, 0xEF, 0x9C, 0xA5, 0xE6, 0x9C, 0xCE, 0x94, 0xCE, 0xE6, 0xCE, 0xE6, 0x10, 0x8C, 0xE6, 0x10, 0x94, 0xA5, 0xCE, 0xEF, 0xE6, 0xCE, 0xDE, 0xBD, 0xCE, 0xAD, 0x73, 0x9C, 0x8C, 0x31, 0x5A, 0x8C, 0x31, 0x19, 0xCE, 0x73, 0x9C, 0x6B, 0xEF, 0xDE, 0xEF, 0x73, 0xDE, 0x6B, 0x6B, 0xDE, 0xEF, 0x73, 0x5A, 0x6B, 0xEF, 0x5A, 0xEF, 0x31, 0x5A, 0xEF, 0x31, 0xDE, 0x29, 0x6B, 0x5A, 0x29, 0xEF, 0xDE, 0x29, 0x6B, 0xDE, 0x29, 0xEF, 0x5A, 0xAD, 0x31, 0x5A, 0xAD, 0x31, 0xDE, 0x6B, 0x29, 0x5A, 0xAD, 0x73, 0xDE, 0x6B, 0xAD, 0xDE, 0x6B, 0x29, 0xDE, 0x6B, 0xAD, 0x5A, 0x29, 0x29, 0x5A, 0x29, 0xAD, 0xDE, 0x29, 0x29, 0xDE, 0x29, 0xAD, 0x5A, 0xAD, 0x31, 0x19, 0xEF, 0x31, 0x19, 0xEF, 0x31, 0x9C, 0xAD, 0x31, 0x9C, 0x6B, 0x6B, 0x19, 0xAD, 0x73, 0x19, 0xEF, 0x73, 0x9C, 0x6B, 0xEF, 0x9C, 0x6B, 0x6B, 0x9C, 0xEF, 0x73, 0x19, 0x6B, 0xEF, 0x19, 0x29, 0x6B, 0x19, 0x29, 0xEF, 0x9C, 0x29, 0x6B, 0x9C, 0x29, 0xEF, 0x19, 0x6B, 0x29, 0x19, 0x6B, 0xAD, 0x9C, 0x6B, 0x29, 0x9C, 0x6B, 0xAD, 0x19, 0x29, 0x29, 0x19, 0x29, 0xAD, 0x9C, 0x29, 0x29, 0x9C, 0x29, 0xAD, 0x19, 0xB5, 0xEF, 0xA5, 0xEF, 0xA5, 0x31, 0xAD, 0xA5, 0x31, 0xEF, 0xB5, 0x63, 0xAD, 0xB5, 0x63, 0x4A, 0x6B, 0x5A, 0x8C, 0x73, 0x5A, 0x4A, 0xEF, 0xDE, 0xCE, 0x73, 0xDE, 0x4A, 0x6B, 0xDE, 0xCE, 0x73, 0x5A, 0x4A, 0xEF, 0x5A, 0x08, 0x6B, 0x5A, 0x08, 0xEF, 0xDE, 0x08, 0x6B, 0xDE, 0x08, 0xEF, 0x5A, 0x4A, 0x29, 0x5A, 0x8C, 0x73, 0xDE, 0x4A, 0xAD, 0xDE, 0x4A, 0x29, 0xDE, 0x4A, 0xAD, 0x5A, 0x08, 0x29, 0x5A, 0x08, 0xAD, 0xDE, 0x08, 0x29, 0xDE, 0x08, 0xAD, 0x5A, 0x4A, 0x6B, 0x19, 0x8C, 0x73, 0x19, 0x4A, 0xEF, 0x9C, 0x4A, 0x6B, 0x9C, 0xCE, 0x73, 0x19, 0x4A, 0xEF, 0x19, 0x08, 0x6B, 0x19, 0x08, 0xEF, 0x9C, 0x08, 0x6B, 0x9C, 0x08, 0xEF, 0x19, 0x4A, 0x29, 0x19, 0x4A, 0xAD, 0x9C, 0x4A, 0x29, 0x9C, 0x4A, 0xAD, 0x19, 0x08, 0x29, 0x19, 0x08, 0xAD, 0x9C, 0x08, 0x29, 0x9C, 0x08, 0xAD, 0x19, 0xCE, 0xB5, 0x63, 0x8C, 0xB5, 0x63, 0x6B, 0x4A, 0x5A, 0x8C, 0x52, 0x9C, 0xAD, 0x52, 0x9C, 0xCE, 0x52, 0x9C, 0x6B, 0xCE, 0xDE, 0xEF, 0x52, 0xDE, 0x6B, 0x4A, 0xDE, 0xEF, 0x52, 0x5A, 0x6B, 0xCE, 0x5A, 0xCE, 0x31, 0x5A, 0xCE, 0x31, 0xDE, 0x29, 0x4A, 0x5A, 0x29, 0xCE, 0xDE, 0x29, 0x4A, 0xDE, 0x29, 0xCE, 0x5A, 0x8C, 0x31, 0xDE, 0x6B, 0x08, 0x5A, 0xAD, 0x52, 0xDE, 0x6B, 0x8C, 0xDE, 0x6B, 0x08, 0xDE, 0x6B, 0x8C, 0x5A, 0x29, 0x08, 0x5A, 0x29, 0x8C, 0xDE, 0x29, 0x08, 0xDE, 0x29, 0x8C, 0x5A, 0xCE, 0x31, 0x19, 0xCE, 0x31, 0x9C, 0x8C, 0x31, 0x9C, 0x6B, 0x4A, 0x19, 0xAD, 0x52, 0x19, 0xEF, 0x52, 0x9C, 0x6B, 0xCE, 0x9C, 0x6B, 0x4A, 0x9C, 0xEF, 0x52, 0x19, 0x6B, 0xCE, 0x19, 0x29, 0x4A, 0x19, 0x29, 0xCE, 0x9C, 0x29, 0x4A, 0x9C, 0x29, 0xCE, 0x19, 0x6B, 0x08, 0x19, 0x6B, 0x8C, 0x9C, 0x6B, 0x08, 0x9C, 0x6B, 0x8C, 0x19, 0x29, 0x08, 0x19, 0x29, 0x8C, 0x9C, 0x29, 0x08, 0x9C, 0x29, 0x8C, 0x19, 0xCE, 0xA5, 0x31, 0x8C, 0xA5, 0x31, 0xEF, 0x94, 0x63, 0xAD, 0x94, 0x63, 0x4A, 0x4A, 0x5A, 0x8C, 0x52, 0x5A, 0x4A, 0xCE, 0xDE, 0xCE, 0x52, 0xDE, 0x4A, 0x4A, 0xDE, 0xCE, 0x52, 0x5A, 0x4A, 0xCE, 0x5A, 0x08, 0x4A, 0x5A, 0x08, 0xCE, 0xDE, 0x08, 0x4A, 0xDE, 0x08, 0xCE, 0x5A, 0x4A, 0x08, 0x5A, 0x8C, 0x52, 0xDE, 0x4A, 0x8C, 0xDE, 0x4A, 0x08, 0xDE, 0x4A, 0x8C, 0x5A, 0x08, 0x08, 0x5A, 0x08, 0x8C, 0xDE, 0x08, 0x08, 0xDE, 0x08, 0x8C, 0x5A, 0x4A, 0x4A, 0x19, 0x8C, 0x52, 0x19, 0x4A, 0xCE, 0x9C, 0x4A, 0x4A, 0x9C, 0xCE, 0x52, 0x19, 0x4A, 0xCE, 0x19, 0x08, 0x4A, 0x19, 0x08, 0xCE, 0x9C, 0x08, 0x4A, 0x9C, 0x08, 0xCE, 0x19, 0x4A, 0x08, 0x19, 0x4A, 0x8C, 0x9C, 0x4A, 0x08, 0x9C, 0x4A, 0x8C, 0x19, 0x08, 0x08, 0x19, 0x08, 0x8C, 0x9C, 0x08, 0x08, 0x9C, 0x08, 0x8C, 0x19, 0xCE, 0x94, 0x63, 0x8C, 0x94, 0x63, 0xCE, 0x9C, 0x9C, 0x6B, 0x6B, 0x52, 0x8C, 0x8C, 0x9C, 0xEF, 0xE6, 0x73, 0xB5, 0xEF, 0xE6, 0xEF, 0xE6, 0x31, 0xE6, 0xBD, 0xEF, 0xAD, 0xE6, 0x31, 0xB5, 0xA5, 0xEF, 0xAD, 0xE6, 0x73, 0xEF, 0xBD, 0xA5, 0xCE, 0xE6, 0x73, 0x8C, 0xE6, 0x73, 0xEF, 0xE6, 0x52, 0xB5, 0xCE, 0xE6, 0xCE, 0xE6, 0x31, 0x8C, 0xE6, 0x31, 0xB5, 0xA5, 0xCE, 0xAD, 0xE6, 0x52, 0xCE, 0xE6, 0x52, 0x8C, 0xE6, 0x52, 0xD6, 0xBD, 0xA5, 0xF7, 0xE6, 0x9C, 0xD6, 0xE6, 0xCE, 0x6B, 0x6B, 0x6B, 0xFF, 0xE6, 0xEF, 0xFF, 0xFF, 0xEF, 0x08, 0xFF, 0x00, 0x01, 0x08, 0x1C, 0x48, 0xB0, 0xA0, 0xC1, 0x83, 0x08, 0x13, 0x2A, 0x5C, 0xC8, 0xB0, 0xA1, 0xC3, 0x87, 0x10, 0x23, 0x4A, 0x9C, 0x78, 0xD0, 0x9F, 0x3E, 0x7F, 0x2B, 0x56, 0xA8, 0xD0, 0xB7, 0x82, 0xA3, 0x3E, 0x15, 0x00, 0x3A, 0xAE, 0xB0, 0xD8, 0x11, 0x23, 0xC7, 0x15, 0xFF, 0x0C, 0xEA, 0x1B, 0xB0, 0xC2, 0x05, 0x8B, 0x0C, 0x46, 0x58, 0x0C, 0x28, 0xE7, 0xE2, 0xC5, 0x8A, 0x72, 0xA7, 0x7C, 0xBD, 0x70, 0x51, 0xAE, 0x43, 0xB9, 0x16, 0x19, 0x78, 0x75, 0x38, 0x48, 0x73, 0xC5, 0xCC, 0x1D, 0x19, 0x8A, 0xCE, 0x74, 0xE9, 0xC2, 0xA7, 0xAF, 0x33, 0x2C, 0x54, 0x74, 0xC8, 0x70, 0x66, 0xC5, 0xC1, 0x0E, 0x3E, 0x5D, 0xAC, 0xEC, 0xE9, 0x73, 0x00, 0x2F, 0x96, 0x2E, 0xC6, 0xBD, 0xD0, 0x97, 0x41, 0x2B, 0x0B, 0xA3, 0xE5, 0x88, 0x66, 0x60, 0x51, 0x6E, 0x45, 0x06, 0x01, 0x63, 0xF5, 0x9D, 0x85, 0x9A, 0x61, 0x05, 0x8B, 0x71, 0x6C, 0xDD, 0xBE, 0xC8, 0xE0, 0xEF, 0xA0, 0x80, 0x15, 0xFC, 0x00, 0xAF, 0x10, 0x10, 0x38, 0xF0, 0xBC, 0xC2, 0x00, 0x3C, 0x8C, 0xE4, 0x47, 0x78, 0x85, 0x07, 0x01, 0x06, 0xF9, 0xF5, 0x9B, 0xDC, 0xEF, 0x5C, 0x3F, 0x7E, 0x96, 0x27, 0x8B, 0xA9, 0x7C, 0x6E, 0x85, 0x98, 0x0D, 0x1A, 0x26, 0x2B, 0xEA, 0x27, 0xC6, 0x9E, 0xC1, 0x00, 0x93, 0x35, 0x14, 0xFC, 0x67, 0xD9, 0x1C, 0x4A, 0x00, 0x01, 0xCC, 0x69, 0x40, 0x7D, 0xAE, 0xF6, 0x39, 0xC8, 0x05, 0x2D, 0x8B, 0xB1, 0x4A, 0xD0, 0x1F, 0x65, 0xDC, 0x96, 0x4D, 0xA7, 0x14, 0xF0, 0xAF, 0xF8, 0xEA, 0xDF, 0x05, 0x25, 0x4F, 0x4E, 0xF9, 0x6F, 0xF2, 0x8A, 0xCA, 0x94, 0x55, 0x17, 0x14, 0x40, 0x19, 0x40, 0xCA, 0x81, 0x9E, 0x2B, 0x0B, 0xA4, 0xDE, 0x8F, 0x30, 0x63, 0x7F, 0x02, 0x40, 0x16, 0xA2, 0xD4, 0x37, 0xF9, 0xDC, 0x69, 0x73, 0xFD, 0x02, 0x08, 0xF4, 0xA0, 0x9D, 0x61, 0xE8, 0xF4, 0x06, 0xCF, 0x6D, 0xE6, 0xAD, 0x41, 0x91, 0xFA, 0x85, 0xAC, 0xE7, 0x0B, 0xD8, 0xBF, 0x1D, 0x39, 0x00, 0xCB, 0xBC, 0x2D, 0xF4, 0x1E, 0x65, 0xF7, 0x29, 0x77, 0xCE, 0x70, 0x93, 0xE1, 0xB6, 0x10, 0x46, 0x2A, 0x84, 0xC7, 0x0F, 0x78, 0xFE, 0xF8, 0xA3, 0xC2, 0x60, 0x02, 0x3D, 0xD7, 0x4F, 0x43, 0xFE, 0xAC, 0x35, 0xD5, 0x0B, 0x2D, 0x94, 0x93, 0x81, 0x4F, 0x1F, 0x96, 0xC3, 0x1A, 0x65, 0xFC, 0x34, 0xA4, 0xCF, 0x0B, 0x1D, 0x48, 0xD3, 0x53, 0x47, 0x3B, 0x84, 0xD7, 0x82, 0x3E, 0x01, 0xDC, 0xF6, 0x8F, 0x3D, 0xDD, 0x2D, 0xD4, 0x53, 0x39, 0xFA, 0xE8, 0x94, 0x41, 0x0B, 0xE3, 0x74, 0x54, 0xCE, 0x0E, 0x92, 0xF1, 0x73, 0xDD, 0x39, 0x1E, 0x2C, 0xA8, 0x91, 0x0A, 0x13, 0x4A, 0x38, 0xD8, 0x84, 0x20, 0xF5, 0x13, 0x20, 0x39, 0xA6, 0x51, 0x44, 0x10, 0x6A, 0xFB, 0x51, 0x29, 0x25, 0x41, 0xFF, 0xA0, 0xD6, 0x8F, 0x2C, 0x01, 0x5E, 0x39, 0xD0, 0x7E, 0xD7, 0x79, 0x29, 0xE6, 0x98, 0x64, 0x1E, 0x14, 0x10, 0x00, 0x3B
    };
    // Set the background to a random set of colors
    server.send(200, "image/gif", gif, sizeof(gif));
  });

  server.onNotFound(handleNotFound);
  server.begin();
  Serial.println("HTTP server started");
}

void loop(void) {
  server.handleClient();
  MDNS.update();
}
